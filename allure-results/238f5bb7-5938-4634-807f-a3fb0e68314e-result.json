{"name": "test_vacancy", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=138.0.7204.51)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff784426f95+76917]\n\tGetHandleVerifier [0x0x7ff784426ff0+77008]\n\t(No symbol) [0x0x7ff7841d9c1c]\n\t(No symbol) [0x0x7ff784231754]\n\t(No symbol) [0x0x7ff784223368]\n\t(No symbol) [0x0x7ff78425846a]\n\t(No symbol) [0x0x7ff784222c16]\n\t(No symbol) [0x0x7ff784258680]\n\t(No symbol) [0x0x7ff78428065c]\n\t(No symbol) [0x0x7ff784258243]\n\t(No symbol) [0x0x7ff784221431]\n\t(No symbol) [0x0x7ff7842221c3]\n\tGetHandleVerifier [0x0x7ff7846fd2cd+3051437]\n\tGetHandleVerifier [0x0x7ff7846f7923+3028483]\n\tGetHandleVerifier [0x0x7ff7847158bd+3151261]\n\tGetHandleVerifier [0x0x7ff78444185e+185662]\n\tGetHandleVerifier [0x0x7ff78444971f+218111]\n\tGetHandleVerifier [0x0x7ff78442fb14+112628]\n\tGetHandleVerifier [0x0x7ff78442fcc9+113065]\n\tGetHandleVerifier [0x0x7ff784416c98+10616]\n\tBaseThreadInitThunk [0x0x7ffcd64de8d7+23]\n\tRtlUserThreadStart [0x0x7ffcd753c34c+44]", "trace": "self = <tests.vacancy_test.TestVacancy object at 0x0000016E18A19D10>\n\n    def test_vacancy(self):\n        vacancy_page = VacancyPage(self.driver)\n        login_page = LoginPage(self.driver)\n        login_page.do_login(\"Admin\", \"admin123\")\n        sleep(5)\n        #\n>       vacancy_page.click_recruitment_menu()\n\ntests\\vacancy_test.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\vacancy_page.py:43: in click_recruitment_menu\n    recruitment_nenu.click()\nC:\\Users\\Admin\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Admin\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\Admin\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016E18ACA270>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff784416c98+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffcd64de8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffcd753c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=138.0.7204.51)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff784426f95+76917]\nE       \tGetHandleVerifier [0x0x7ff784426ff0+77008]\nE       \t(No symbol) [0x0x7ff7841d9c1c]\nE       \t(No symbol) [0x0x7ff784231754]\nE       \t(No symbol) [0x0x7ff784223368]\nE       \t(No symbol) [0x0x7ff78425846a]\nE       \t(No symbol) [0x0x7ff784222c16]\nE       \t(No symbol) [0x0x7ff784258680]\nE       \t(No symbol) [0x0x7ff78428065c]\nE       \t(No symbol) [0x0x7ff784258243]\nE       \t(No symbol) [0x0x7ff784221431]\nE       \t(No symbol) [0x0x7ff7842221c3]\nE       \tGetHandleVerifier [0x0x7ff7846fd2cd+3051437]\nE       \tGetHandleVerifier [0x0x7ff7846f7923+3028483]\nE       \tGetHandleVerifier [0x0x7ff7847158bd+3151261]\nE       \tGetHandleVerifier [0x0x7ff78444185e+185662]\nE       \tGetHandleVerifier [0x0x7ff78444971f+218111]\nE       \tGetHandleVerifier [0x0x7ff78442fb14+112628]\nE       \tGetHandleVerifier [0x0x7ff78442fcc9+113065]\nE       \tGetHandleVerifier [0x0x7ff784416c98+10616]\nE       \tBaseThreadInitThunk [0x0x7ffcd64de8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffcd753c34c+44]\n\nC:\\Users\\Admin\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "start": 1751980938813, "stop": 1751980944599, "uuid": "ec0ffc90-f82d-410a-bc1b-71ea4b57beaf", "historyId": "4fe34d3b79974fb2dc57ac64ec8f7ea7", "testCaseId": "4fe34d3b79974fb2dc57ac64ec8f7ea7", "fullName": "tests.vacancy_test.TestVacancy#test_vacancy", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "vacancy_test"}, {"name": "subSuite", "value": "TestVacancy"}, {"name": "host", "value": "ThaoNguyen"}, {"name": "thread", "value": "19372-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vacancy_test"}]}